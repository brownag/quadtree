% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lcp.R
\name{find_lcp}
\alias{find_lcp}
\alias{find_lcp,LcpFinder,numeric-method}
\title{Find the LCP between two points on a quadtree}
\usage{
\S4method{find_lcp}{LcpFinder,numeric}(x, y, use_original_end_points = FALSE)
}
\arguments{
\item{x}{the \code{\link{LcpFinder}} object returned from
\code{lcp_finder}}

\item{y}{numeric vector with two elements - the x and y coordinates
of the the destination point}

\item{use_original_end_points}{boolean; by default the start and end points
of the returned path are not the points given by the user but instead the
centroids of the cells that those points fall in. If this parameter is set
to \code{TRUE} the start and end points (representing the cell centroids)
are replaced with the actual points specified by the user. Note that this
is done after the calculation and has no effect on the path found by the
algorithm.}
}
\value{
\code{find_lcp} returns a five column matrix representing the
  least cost path. It has the following columns:
  \itemize{
     \item{\code{x}: }{x coordinate of this point}
     \item{\code{y}: }{y coordinate of this point}
     \item{\code{cost_tot}: }{the cumulative cost up to this point}
     \item{\code{dist_tot}: }{the cumulative distance up to this point - note
     that this is not straight-line distance, but instead the distance along
     the path}
     \item{\code{cost_cell}: }{the cost of the cell that contains this point}
   }

  If no path is possible between the two points, a 0-row matrix with the
  previously described columns is returned. Also, note that when creating the
  \code{\link{LcpFinder}} object using \code{lcp_finder}, \code{NULL} will be
  returned if \code{start_point} falls outside of the quadtree. If
  \code{NULL} is passed to the \code{lcp_finder} parameter, a 0-row matrix is
  returned.

  IMPORTANT NOTE: the \code{use_original_end_points} options ONLY changes the
  x and y coordinates of the first and last points - it doesn't change the
  \code{cost_tot} or \code{dist_tot} columns. This means that even though the
  start and end points have changed, the \code{cost_tot} and \code{dist_tot}
  columns still represent the cost and distance using the cell centroids of
  the start and end cells.
}
\description{
Finds the least cost path (LCP) between two points, using a
  quadtree as a resistance surface
}
\details{
See \code{\link{lcp_finder}} for more information on how the LCP
  is found
}
\examples{
library(raster)

# create a quadtree
data(habitat)
rast <- habitat
qt <- quadtree(rast, split_threshold = .1, adj_type = "expand")
plot(qt, crop = TRUE, na_col = NULL, border_lwd = .4)

# define our start and end points
start_pt <- c(6989, 34007)
end_pt <- c(33015, 38162)

# create the LCP finder object and find the LCP
lcpf <- lcp_finder(qt, start_pt)
path <- find_lcp(lcpf, end_pt)

# plot the LCP
plot(qt, crop = TRUE, na_col = NULL, border_col = "gray30", border_lwd = .4)
points(rbind(start_pt, end_pt), pch = 16, col = "red")
lines(path[, 1:2], col = "black")

# NOTE: see "Examples" in ?lcp_finder for more examples
}
\seealso{
\code{\link{lcp_finder}()} creates the LCP finder object used as
  input to this function. \code{\link{find_lcps}()} calculates all LCPs
  whose cost-distance is less than some value. \code{\link{summarize_lcps}()}
  outputs a summary matrix of all LCPs that have been calculated so far.
}
