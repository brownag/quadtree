% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qt_lcp.R
\name{qt_find_lcps}
\alias{qt_find_lcps}
\title{Find LCPs to surrounding points}
\usage{
qt_find_lcps(lcp_finder, limit_type = "none", limit = NULL)
}
\arguments{
\item{lcp_finder}{the LCP finder object returned from
\code{\link{qt_lcp_finder}}}

\item{limit_type}{character; one of "none", "costdistance", "distance", or
"costdistance+distance". Abbreviations can also be used - i.e "n", "cd",
"d", "cd+d". Specifies what variable (if any) to constrain the paths on}

\item{limit}{numeric; the maximum value allowed for the variable specified by
\code{limit_type}. If \code{limit_type} is "none", this parameter does not
need to be provided}
}
\value{
Returns a matrix
}
\description{
Finds the LCPs to surrounding points. Constraints can be placed
  on the LCPs, so that only LCPs that are less than some specified
  cost-distance are returned. In addition to cost, LCPs can be constrained by
  distance or cost-distance + distance (see Details).
}
\details{
When \code{limit_type} is "costdistance", all paths found will have a
cost-distance less than \code{limit}. As described in the documentation for
\code{\link{qt_lcp_finder}}, the cost-distance is the cost of the cell times
the length of the segment that falls within the cell. Because all edges
connect two cells, the segments that fall in each cell are first calculated
and then added.

When \code{limit_type} is "distance", only distance is considered. Note that
this is \strong{not} straight line distance. It is the Euclidean distance of
the least-cost path - it ignores the cost value. Thus all the paths found
will have a total distance less than \code{limit}.

When \code{limit_type} is "costdistance+distance", the cost-distance and
distance are added together. This is primarily for use when the quadtree
contains "resistance" values between 0 and 1. When the resistance values are
below 1, the cost-distance will always be lower than the distance - in fact,
if there are resistance values of 0, the total cost of a path could be 0.
Adding the cost-distance and the cost ensures that if there is no resistance,
the cost of the path will be equal to the distance traveled. Thus, if the
limit is set at 15, the longest possible path would be 15 (which would only
occur if it travels over cells that all have a resistance of 0) and would
increase as the resistance of the underlying surface increases. Note that an
equivalent method would be to simply add 1 to all the values so they fall
between 1 and 2, and then use "costdistance" as the limiting variable.

A important note to make is that
}
\examples{
# ----- create a quadtree
# create raster of random values
nrow = 57
ncol = 75
set.seed(4)
rast = raster(matrix(runif(nrow*ncol), nrow=nrow, ncol=ncol), xmn=0, xmx=ncol, ymn=0, ymx=nrow)

# create quadtree
qt = qt_create(rast, range_limit = .9, adj_type="expand")

start_pt = c(ncol/2,nrow/2)

#--------- find all LCPs
lcpf1 = qt_lcp_finder(qt, start_pt)
paths1 = qt_find_lcps(lcpf1, limit_type="none")

#--------- limit LCPs by cost-distance
lcpf2 = qt_lcp_finder(qt, start_pt)
paths2 = qt_find_lcps(lcpf2, limit_type="cd", limit=18)

#--------- limit LCPs by distance
lcpf3 = qt_lcp_finder(qt, start_pt)
paths3 = qt_find_lcps(lcpf3, limit_type="d", limit=18)

#--------- limit LCPs by cost-distance + distance
lcpf4 = qt_lcp_finder(qt, start_pt)
paths4 = qt_find_lcps(lcpf4, limit_type="cd+d", limit=18)

#--------- Now plot the reachable cells, by method
# plot the centroids of the reachable cells
qt_plot(qt, crop=TRUE, na_col=NULL, border_col="gray60", col=c("white", "gray30"), main="reachable cells, by 'limit_type'")
points((paths1$xmin + paths1$xmax)/2, (paths1$ymin + paths1$ymax)/2, pch=16, col="black", cex=1.4)
points((paths2$xmin + paths2$xmax)/2, (paths2$ymin + paths2$ymax)/2, pch=16, col="red", cex=1.1)
points((paths3$xmin + paths3$xmax)/2, (paths3$ymin + paths3$ymax)/2, pch=16, col="blue", cex=.8)
points((paths4$xmin + paths4$xmax)/2, (paths4$ymin + paths4$ymax)/2, pch=16, col="yellow", cex=.5)
points(start_pt[1], start_pt[2], bg="green", col="black", pch=24, cex=1.5)
legend("topright", title="limit_type", legend=c("none", "cd", "d", "cd+d"), pch=c(16,16,16,16), col=c("black", "red", "blue", "yellow"), pt.cex=c(1.4,1.1,.8,.5))

#----------------------------------------------------
# An example of what NOT to do
#----------------------------------------------------
lcpf5 = qt_lcp_finder(qt, start_pt)
paths5a = qt_find_lcps(lcpf5a, limit_type="cd", limit=18)
paths5b = qt_find_lcps(lcpf5b, limit_type="cd", limit=5) 
#^^^ DON'T DO THIS! ^^^ (don't try to reuse the lcp finder to find *shorter* paths) 

nrow(paths5a)
nrow(paths5b) #they're the same length!!!

range(paths5b$cost_tot) #returns paths with cost greater than 5!!!
}
