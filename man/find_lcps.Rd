% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lcp.R
\name{find_lcps}
\alias{find_lcps}
\alias{find_lcps,LcpFinder-method}
\title{Find LCPs to surrounding points}
\usage{
\S4method{find_lcps}{LcpFinder}(x, limit = NULL)
}
\arguments{
\item{x}{the \code{LcpFinder} object returned from \code{\link{lcp_finder}}}

\item{limit}{numeric; the maximum cost-distance for the LCPs. If \code{NULL}
(the default), no limit is applied and all possible LCPs (within the
\code{LcpFinder}'s search area) are found}
}
\value{
Returns a matrix summarizing each LCP found.
  \code{\link{summarize_lcps}} is used to generate this matrix - see the help
  for that function for details on the return matrix. Note that this function
  does \strong{not} return the full paths to each point - however, each of
  the paths summarized in the output matrix has already been calculated, and
  can be retrieved using \code{find_lcp()} (without having to recalculate
  the path, since it's already been calculated).
}
\description{
Calculates the LCPs to surrounding points. A constraint can be
  placed on the LCPs, so that only LCPs that are less than some specified
  cost-distance are returned.
}
\details{
A very important note to make is that once the LCP tree is
calculated, it never gets smaller. For example, we could use
\code{find_lcps()} with \code{limit = NULL} to calculate all LCPS. If we then
used \code{find_lcps()} on the same \code{LcpFinder} but this time used a
limit, it would still return \emph{all} of the LCPs - even those that are
greater than the specified limit, since the tree never shrinks.
}
\examples{
####### NOTE #######
# see the "quadtree-lcp" vignette  for more details and examples:
# vignette("quadtree-lcp", package = "quadtree")
####################

library(quadtree)

# create a quadtree
data(habitat)
qt <- quadtree(habitat, split_threshold = .1, adj_type = "expand")

start_pt <- c(19000, 25000)

# finds LCPs to all cells
lcpf1 <- lcp_finder(qt, start_pt)
paths1 <- find_lcps(lcpf1, limit = NULL)

# limit LCPs by cost-distance
lcpf2 <- lcp_finder(qt, start_pt)
paths2 <- find_lcps(lcpf2, limit = 5000)

# Now plot the reachable cells
plot(qt, crop = TRUE, na_col = NULL, border_lwd = .3)
points(lcpf1, col = "black", pch = 16, cex = 1)
points(lcpf2, col = "red", pch = 16, cex = .7)
points(start_pt[1], start_pt[2], bg = "skyblue", col = "black", pch = 24,
       cex = 1.5)
}
\seealso{
\code{\link{lcp_finder}()} creates the \code{\link{LcpFinder}}
  object used as input to this function. \code{\link{find_lcp}()} returns the
  LCP between two points. \code{\link{summarize_lcps}()} outputs a summary
  matrix of all LCPs that have been calculated so far.
}
